
import java.awt.MouseInfo;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 * calls when subnet button is clicked
 * allows the user to input a desired subnet
 * @author Adam
 */
public class editSubnet extends javax.swing.JFrame {
    int index;  //index of hub on hublist
    
    static boolean editSubnetFlag; //used to determine if button is operating in initialize or edit mode
    
    /**
     * Creates new form NewJPanel
     */
    
    public editSubnet(int i) {
        index = i;
        //checks if we're editing a subnet or initializing
        if ( NetworkReader.hubList.get(index).getSubnetFull() == null ){
            //initializing
            editSubnetFlag = false;
        } else {
            //editing
            editSubnetFlag = true;
        }
        this.setLocation(NetworkReader.p); //sets location at last form
        this.setUndecorated(true);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        subnetValue = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        cancelButton = new javax.swing.JButton();
        setButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);

        jLabel1.setText("Set Subnet: 192.168.");

        subnetValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subnetValueActionPerformed(evt);
            }
        });

        jLabel2.setText(".0");

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        setButton.setText("Set");
        setButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cancelButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(setButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(subnetValue, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(subnetValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(setButton)
                    .addComponent(cancelButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        HUBdata s = new HUBdata(index);
        s.setVisible(true);
        super.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed
    
    private void setButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setButtonActionPerformed
        String S;
        S = subnetValue.getText(); 
        int oldSubnet , j, newSubnet;
        
        if (subnetCheck(S)){ //checks if subnet value is a unique integer between 1-255
            newSubnet = Integer.parseInt(S); //converts subnet
            oldSubnet = NetworkReader.hubList.get(index).getSubnet();
            
            if (editSubnetFlag){ //special code for edit  
                for (virtualMachine vm : NetworkReader.vmList ){//for each virtual machine
                    j = 0;
                    while ( j < vm.subnetList.size() ){ //go through subnet list 
                        if ( vm.subnetList.get(j) == oldSubnet ){//if there is an instance of the old subnet
                            vm.subnetList.remove(j);//remove it
                            vm.subnetList.add(j, newSubnet);//replace it with the new one
                        }
                        j++;
                    }
                    // update address list
                    j = 0;
                    while (j < vm.addressList.size()){//go through the list of address
                        if ( (vm.addressList.get(j) != null) 
                                && (NetworkReader.getthirdOctet(vm.addressList.get(j)) == oldSubnet) ){//if the address is not null and is on the old subnet    
                            S = "\"192.168." + newSubnet + "." + NetworkReader.getlastOctet(vm.addressList.get(j))  + "\"";//configure the new address
                            vm.addressList.remove(j);//remove the old address
                            vm.addressList.add(j, S);//add the new address
                        }
                        j++;
                    }
                }
            }//end edit code
            
            NetworkReader.hubList.get(index).setSubnet(newSubnet); //calls set subnet for the new one
            NetworkReader.hubList.get(index).setSubnetFull("\"192.168." + newSubnet + ".0\""); //sets the new full subnet value
            NetworkReader.drawConnections();
            HUBdata s = new HUBdata(index);
            s.setVisible(true);
            super.dispose();
        }
    }//GEN-LAST:event_setButtonActionPerformed

    private void subnetValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subnetValueActionPerformed

    }//GEN-LAST:event_subnetValueActionPerformed
            
    boolean subnetCheck(String s){//checks if the user specified input is okay, outputs error messages as necessary
        int i = 0;
        int j = 0;
        String ErrMsg;
        
        try {
            i = Integer.parseInt(s);
        } catch(NumberFormatException e){ //if input is not an integer
            ErrMsg = "ERROR: NEEDS INTEGER VALUE IN RANGE 1-255";
            Error error = new Error(ErrMsg);
            error.setVisible(true);
            subnetValue.setText(null);
            return false;
        }
        if ( (i > 255)||(i<1) ){ //if input is out of range
            ErrMsg = "ERROR: NEEDS INTEGER VALUE IN RANGE 1-255";
            Error error = new Error(ErrMsg);
            error.setVisible(true);
            subnetValue.setText(null);
            return false;
        }
        
        for ( hub Hub : NetworkReader.hubList ){ //if subnet is already available
            if ( Hub.getSubnet() == i ){
                ErrMsg = "ERROR: SUBNET  192.168." + i + ".0 IS UNAVAILABLE";
                Error error = new Error(ErrMsg);
                error.setVisible(true);
                subnetValue.setText(null);
                return false;
            }
        }
        return true;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton setButton;
    private javax.swing.JTextField subnetValue;
    // End of variables declaration//GEN-END:variables
}
